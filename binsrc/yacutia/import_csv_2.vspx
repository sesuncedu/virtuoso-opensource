<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
 -  $Id$
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2014 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
 -
-->
<v:page name="db_rdf_class" decor="yacutia_decor.vspx" style="yacutia_style.xsl"
        fast-render="1" xmlns:v="http://www.openlinksw.com/vspx/"
        xmlns:vm="http://www.openlinksw.com/vspx/macro"
        doctype="-//W3C//DTD XHTML 1.0 Transitional//EN">
  <vm:pagetitle>CSV Import</vm:pagetitle>
  <vm:pagewrapper>
  <vm:variables>
    <v:variable name="path" persist="0" type="varchar" default="null"  param-name="path"/>
    <v:variable name="mode" persist="0" type="integer" default="0" param-name="mode"/>
    <v:variable name="head" persist="0" type="any" default="null" />
    <v:variable name="delim" persist="0" type="char" default="','" param-name="delim"/>
    <v:variable name="quot" persist="0" type="char" default='&apos;"&apos;' param-name="quot"/>
    <v:variable name="hrow" persist="0" type="int" default="0" param-name="hrow"/>
    <v:variable name="offs" persist="0" type="int" default="1" param-name="offs"/>
    <v:variable name="tname" persist="0" type="varchar" default="''" />
    <v:variable name="enc" persist="0" type="varchar" default='null' param-name="enc"/>
    <v:variable name="pmode" persist="0" type="int" default="1" param-name="pmode"/>
  </vm:variables>
  <vm:menu>
  </vm:menu>
  <vm:variables>
  </vm:variables>

  <vm:header caption="CSV Import"/>
  <vm:pagebody>
      <v:on-init>
	  if (self.head is null)
	    {
              declare ss, cn, tmp any;
	      if (self.mode = 0)
	        {
		  if (self.path like '%.gz')
	            ss := gz_file_open (self.path);
		  else
	        ss := file_open (self.path);
	        }
              else
                {  
		  ss := string_output ();
		  declare exit handler for not found {
		     self.vc_error_message := 'Invalid path';
		     self.vc_is_valid := 0;
		     return 0;
		  };
		  select RES_CONTENT into cn from WS.WS.SYS_DAV_RES where RES_FULL_PATH = self.path;
		  http (cn, ss);
		}
              if (self.enc = '')
                self.enc := null;	      
              tmp := split_and_decode (self.path, 0, '\0\0/');  
              self.tname := SYS_ALFANUM_NAME (tmp[length(tmp) - 1]);		
	      self.head := y_csv_get_cols (ss, self.hrow, self.offs, 
	      	vector ('csv-delimiter', self.delim, 'csv-quote', self.quot, 'encoding', self.enc, 'mode', self.pmode));
	    }
      </v:on-init>
      <v:form name="inx_form" type="simple" method="POST" action="" >
        <table class="ctl_grp">
          <tr class="ctl_grp_title">
            <th>Confirm Table details</th>
          </tr>
	  <tr>
	      <td>
		  <label for="">Table Qualifier</label>
		  <v:text name="tb_qual" value="" default_value="CSV" />
	      </td>
	  </tr>
	  <tr>
	      <td>
		  <label for="">Table Owner</label>
		  <v:text name="tb_own" value="" default_value="DBA" />
	      </td>
	  </tr>
	  <tr>
	      <td>
		  <label for="">Table Name</label>
		  <v:text name="tb_name" value="" default_value="--self.tname" />
	      </td>
	  </tr>
	  <?vsp
	  if (isvector (self.head)) {
	    declare inx int;
            inx := 0; 
	    ?>
	  <tr>
	      <td>
		  <input type="text" name="<?V sprintf ('col_id') ?>" value="ID" />
	      </td>
	      <td>INTEGER IDENTITY PRIMARY KEY
	      </td>
	  </tr>

	    <?vsp
	    foreach (any _row in self.head) do 
	      {
	  ?>
	  <tr>
	      <td>
		  <input type="text" name="<?V sprintf ('col_%d', inx) ?>" value="<?V _row[0] ?>" />
	      </td>
	      <td>
		  <select name="<?V sprintf ('col_%d_dt', inx) ?>">
		      <?vsp 
		         y_col_dts (_row[1]);
		      ?>
		  </select>
	      </td>
	  </tr>
	  <?vsp
	       inx := inx + 1;
	  } }
	  ?>
          <tr>
            <td>
		  <v:button action="simple" name="cncl" value="Back">
		      <v:on-post><![CDATA[
		    self.vc_redirect (sprintf ('import_csv_opts.vspx?path=%U&mode=%d', self.path, self.mode));
			  ]]></v:on-post>
		  </v:button>
              <v:button action="simple" value="Create Table &amp; Import Data" name="upl_btn">
                <v:on-post>
		  <![CDATA[
		  declare ss, s, i, nrec, q, o, tmp, err any;
		  declare n, dt any;
		  declare tb any;
		  tb := SYS_ALFANUM_NAME (self.tb_name.ufl_value);
		  q := self.tb_qual.ufl_value;
		  o := self.tb_own.ufl_value;
		  ss := string_output ();
		  http (sprintf ('create table "%I"."%I"."%I" ( \n', q, o, tb), ss);
		  tb := sprintf ('%s.%s.%s', q, o, tb);
		  n := get_keyword (sprintf ('col_id'), params); 
		  if (not length (n))
		    {
		      self.vc_is_valid := 0;
		      self.vc_error_message := 'Invalid column name';
		      return 0;
		    }
		  http (sprintf ('"%I" INTEGER IDENTITY PRIMARY KEY, \n', n), ss);
		  for (i := 0; i < length (self.head); i := i + 1)
		    {
		       n := get_keyword (sprintf ('col_%d', i), params); 
		       dt := get_keyword (sprintf ('col_%d_dt', i), params); 
		       if (not length (n) or not length (dt))
		         {
			   self.vc_is_valid := 0;
			   self.vc_error_message := 'Invalid column name';
			   return 0;
			 }
                       http (sprintf ('"%I" %s', n, dt), ss);
		       if (i < length (self.head) - 1)
		         http (', \n', ss);  
		    }
		  http (')', ss);
		  declare exit handler for sqlstate '*' 
		  {
		    self.vc_is_valid := 0;
		    self.vc_error_message := __SQL_MESSAGE;
		    return 0;
		  };
		  exec (string_output_string (ss));
		  commit work;
		  if (self.mode = 0)
		    {
		      if (self.path like '%.gz')
			s := gz_file_open (self.path);
		      else
		    s := file_open (self.path);
		    }
		  else
		    {  
		      declare cn any;
		      s := string_output ();
		      declare exit handler for not found {
			 self.vc_error_message := 'Invalid path';
			 self.vc_is_valid := 0;
			 return 0;
		      };
		      select RES_CONTENT into cn from WS.WS.SYS_DAV_RES where RES_FULL_PATH = self.path;
		      http (cn, s);
		    }
		  tmp := csv_load (s, self.offs, null, tb, 1, 
		     vector ('csv-delimiter', self.delim, 'csv-quote', self.quot, 'encoding', self.enc, 'mode', self.pmode, 'log', 1));  
		  if (isvector (tmp))
                    {
		      nrec := tmp[0];
                      err := string_output_string (tmp[1]);
		    }
		  else
		    nrec := tmp;
		  declare msg_path any;
		  msg_path := sprintf ('/DAV/temp/%s.xml', xenc_rand_bytes (10, 1));    
		  if (length (err))
		    {
		      YACUTIA_DAV_COL_CREATE('/DAV/temp/', '111101101N', 'dav', 'administrators');
		      DB.DBA.YACUTIA_DAV_RES_UPLOAD (msg_path, err, '', '111101101N', 'dav', 'administrators', now(), now(), null);
		    }   
		  else
                    msg_path := '';
		  self.vc_redirect (sprintf ('import_csv_3.vspx?tb=%U&nrec=%d&err=%U', tb, nrec, msg_path));
                  ]]>
                </v:on-post>
              </v:button>
            </td>
          </tr>
        </table>
      </v:form>

  </vm:pagebody>
  </vm:pagewrapper>
</v:page>
