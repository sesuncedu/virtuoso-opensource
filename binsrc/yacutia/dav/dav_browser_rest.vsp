<?vsp
--
--  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
--  project.
--
--  Copyright (C) 1998-2014 OpenLink Software
--
--  This project is free software; you can redistribute it and/or modify it
--  under the terms of the GNU General Public License as published by the
--  Free Software Foundation; only version 2 of the License, dated June 1991.
--
--  This program is distributed in the hope that it will be useful, but
--  WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
--  General Public License for more details.
--
--  You should have received a copy of the GNU General Public License along
--  with this program; if not, write to the Free Software Foundation, Inc.,
--  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
--

  declare N, id integer;
  declare sid, realm, _account_name, action, subAction, node, nodePath varchar;
  declare nodes, parts, returnData any;

  sid := get_keyword ('sid', params, '');
  realm := get_keyword ('realm', params, '');

  id := cast (get_keyword ('id', params, '0') as integer);
  action := get_keyword ('a', params, '');
  subAction := get_keyword ('sa', params, '');
  if (action = 'search')
  {
    returnData := vector ();
    if (subAction = 'metas')
    {
      declare predicateMetas, compareMetas any;

      WEBDAV.DBA.dc_predicateMetas (predicateMetas);
      WEBDAV.DBA.dc_compareMetas (compareMetas);
      returnData := vector (predicateMetas, compareMetas);
    }
    if (subAction = 'schemas')
    {
      for (select RS_URI, RS_CATNAME from WS.WS.SYS_RDF_SCHEMAS order by RS_CATNAME) do
      {
        returnData := vector_concat (returnData, vector (RS_URI, RS_CATNAME));
      }
    }
    if (subAction = 'schemaProperties')
    {
      declare schemaURI any;

      schemaURI := get_keyword ('schema', params, '');
      for (select c0, c1 from WEBDAV.DBA.dav_rdf_schema_properties_short_rs (rs0)(c0 varchar, c1 varchar) rs where rs0 = schemaURI order by c1) do
      {
        returnData := vector_concat (returnData, vector (c0, c1));
      }
    }
    if (subAction = 'check')
    {
    	;
    }
    http_rewrite ();
    http_header ('Content-Type: text/plain\r\n');
    http (WEBDAV.DBA.obj2json (returnData, 5));
  }
  else if (action = 'cartridges')
  {
    http (WEBDAV.DBA.obj2json (WEBDAV.DBA.cartridges_get (), 5));
  }
  else if (action = 'metaCartridges')
  {
    http (WEBDAV.DBA.obj2json (WEBDAV.DBA.metaCartridges_get (), 5));
  }
  else if (action = 'mailVerify')
  {
    declare _error, _connection, _server, _port, _user, _password any;
    declare exit handler for SQLSTATE '*'
    {
      _error := __SQL_MESSAGE;
      goto _exit;
    };

    _connection := trim (get_keyword ('connection', params, 'none'));
    _server     := trim (get_keyword ('server', params, ''));
    _port       := trim (get_keyword ('port', params, '143'));
    _user       := trim (get_keyword ('user', params, ''));
    _password   := trim (get_keyword ('password', params, ''));
    if (_password = '**********')
      _password := DB.DBA.IMAP__paramGet (DB.DBA.DAV_SEARCH_ID (get_keyword ('path', params), 'C'), 'C', 'password', 0);

    _error      := DB.DBA.IMAP__verify (_connection, _server, _port, _user, _password);

  _exit:;
    http_rewrite ();
    http_header ('Access-Control-Allow-Origin: *\r\n');
    http_header ('Content-Type: text/plain\r\n');
    http (_error);
  }
  else if (action = 'mailFolders')
  {
    declare _error, _server, _port, _user, _password varchar;
    declare _connection, _folders, _folderParts, _folderPath, _list any;

    _list := vector ();
    _connection := trim (get_keyword ('connection', params));
    _server := trim (get_keyword ('server', params));
    if (is_empty_or_null (_server))
      goto _exit_1;

    _port := trim (get_keyword ('port', params));
    if (is_empty_or_null (_port))
      goto _exit_1;

    _user := trim (get_keyword ('user', params));
    if (is_empty_or_null (_user))
      goto _exit_1;

    _password := trim (get_keyword ('password', params));
    if (is_empty_or_null (_password))
      goto _exit_1;

    if (_password = '**********')
      _password := DB.DBA.IMAP__paramGet (DB.DBA.DAV_SEARCH_ID (get_keyword ('path', params), 'C'), 'C', 'password', 0);

    _connection := case when (_connection = 'ssl') then 1 else 0 end;
    if (isnull (_port))
    {
      _port := '143';
      if (_connection)
        _port := '993';
    }
    {
      declare exit handler for SQLSTATE '*'
      {
        goto _exit_1;
      };
      _folders := imap_get (sprintf ('%s:%s', _server, _port), _user, _password, 'list', '*', null, _connection);
      foreach (any _folder in _folders) do
      {
        _folderParts := regexp_parse('\\((.*)\\)\\s\\"(.*)\\"\\s\\"?(.*)((\\r\\n)|\\")', _folder, 0);
        if (length (_folderParts) > 7)
        {
          _folderPath := subseq (_folder, _folderParts[6], _folderParts[7]);
          _folderPath := rtrim (rtrim (rtrim (_folderPath, '\n'), '\r'), '"');
          _list := vector_concat (_list , vector (_folderPath));
        }
      }
    }
  _exit_1:;
    http_rewrite ();
    http_header ('Access-Control-Allow-Origin: *\r\n');
    http (WEBDAV.DBA.obj2json (_list, 5));
  }
  else if (action = 'webdavVerify')
  {
    declare _error, _server, _params, _password any;
    declare exit handler for SQLSTATE '*'
    {
      _error := __SQL_MESSAGE;
      goto _exit_2;
    };

    _server     := get_keyword ('server', params, '');
    if (get_keyword ('type', params, 'Digest') = 'Digest')
    {
      _password   := get_keyword ('password', params);
      if (_password = '**********')
        _password := DB.DBA.WebDAV__paramGet (DB.DBA.DAV_SEARCH_ID (get_keyword ('path', params), 'C'), 'C', 'password', 0, 1, 1);

      _params     := vector ('authenticationType', 'Digest', 'user', get_keyword ('user', params, ''), 'password', _password);
    }
    else
    {
      _params     := vector ('authenticationType', 'WebID', 'key', get_keyword ('key', params), 'keyOwner', (select VS_UID from DB.DBA.VSPX_SESSION where VS_SID = sid));
    }
    _error      := DB.DBA.WebDAV__verify (_server, _params);

  _exit_2:;
    http_rewrite ();
    http_header ('Access-Control-Allow-Origin: *\r\n');
    http_header ('Content-Type: text/plain\r\n');
    http (_error);
  }
  return;
?>