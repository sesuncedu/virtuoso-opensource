<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
 -  $Id$
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2014 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
 -
-->
<table class="listing" xmlns:v="http://www.openlinksw.com/vspx/" xmlns:xhtml="http://www.w3.org/1999/xhtml">
  <?vsp
    if (get_keyword('mode', control.vc_page.vc_event.ve_params) = 'create')
    {
  ?>
  <tr>
    <td>
      <table border="0" class="SubAction">
        <v:form name="create_roles_form" type="simple" method="POST" action="accounts_page.vspx?page=2">
          <v:on-post>
            <v:script>
              <![CDATA[
                declare mode, val, role_name  varchar;
                declare  comp vspx_field;
		declare exit handler for sqlstate '*'
		{
		  rollback work;
		  self.vc_is_valid := 0;
		  self.vc_error_message := __SQL_MESSAGE;
		};
                if (get_keyword('create', control.vc_page.vc_event.ve_params) <> '')
                {
                  declare inx, len integer;
                  comp := control.vc_find_control('name');
                  role_name:= trim (comp.ufl_value);
                  USER_ROLE_CREATE(role_name);
                  comp := control.vc_find_control('desc');
                  val:= comp.ufl_value;
                  update sys_users set U_FULL_NAME = val where U_NAME = role_name;
                  comp := control.vc_find_control('sel_list');
                  inx := 0; len := length (self.roles_grant_list);
                  while (inx < len)
                  {
                    USER_GRANT_ROLE (self.roles_grant_list [inx], role_name);
                    inx := inx + 1;
                  }
                  http_request_status ('HTTP/1.1 302 Found');
                  http_header (sprintf ('Location: accounts_page.vspx?page=2&sid=%s&realm=%s\r\n', self.sid, self.realm));
                }
                else if (get_keyword ('cancel', control.vc_page.vc_event.ve_params) is not NULL)
                {
                  http_request_status ('HTTP/1.1 302 Found');
                  http_header (sprintf ('Location: accounts_page.vspx?page=2&sid=%s&realm=%s\r\n', self.sid, self.realm));
                }
                else if (get_keyword ('load', control.vc_page.vc_event.ve_params) <> '')
                {
                  comp := control.vc_find_control('gp');
                  self.group_sel := comp.ufl_selected;
                  comp := control.vc_find_control('us');
                  self.user_sel := comp.ufl_selected;
                }
                else if (get_keyword ('grant', control.vc_page.vc_event.ve_params) <> '')
                {
                  declare cnt, i integer;
                  cnt := length (control.vc_page.vc_event.ve_params);
                  i := 0;
                  while (i < cnt)
                  {
                    if (aref (control.vc_page.vc_event.ve_params, i) = 'roles_users')
                      self.roles_grant_list := vector_concat (self.roles_grant_list, vector (aref (control.vc_page.vc_event.ve_params, i + 1)));
                    i:= i + 2;
                  }
                }
                else if (get_keyword('revoke', control.vc_page.vc_event.ve_params) <> '')
                {
                  declare cnt, i, size, indx , flag_  integer;
                  declare roles any;
                  roles := vector();
                  cnt := length(self.roles_grant_list);
                  size := length(control.vc_page.vc_event.ve_params);
                  i := 0;
                  while (i < cnt)
                  {
                    indx :=0;
                    flag_ :=0;
                    while (indx < size)
                    {
                      if (aref(control.vc_page.vc_event.ve_params, indx) = 'sel_list' and self.roles_grant_list [i] = aref(control.vc_page.vc_event.ve_params, indx + 1))
                        flag_:=1;
                      indx := indx + 2;
                    }
                    if (flag_ = 0)
                      roles:= vector_concat (roles, vector(self.roles_grant_list[i]));
                    i := i + 1;
                  }
                  self.roles_grant_list := vector ();
                  cnt:= length (roles);
                  i := 0;
                  while (i < cnt)
                  {
                    self.roles_grant_list := vector_concat (self.roles_grant_list, vector (roles [i]));
                    i := i + 1;
                  }
                }
                declare inx, len integer;
                comp := control.vc_find_control ('sel_list');
                (comp as vspx_select_list).vsl_items:= vector ();
                (comp as vspx_select_list).vsl_item_values:= vector ();
                inx := 0; len := length (self.roles_grant_list);
                while (inx < len)
                {
                  (comp as vspx_select_list).vsl_items := vector_concat ((comp as vspx_select_list).vsl_items, vector (self.roles_grant_list [inx]));
                  (comp as vspx_select_list).vsl_item_values := vector_concat ((comp as vspx_select_list).vsl_item_values, vector (self.roles_grant_list [inx]));
                  inx := inx + 1;
                }
                (comp as vspx_select_list).vsl_selected_inx := 0;
              ]]>
            </v:script>
          </v:on-post>
          <input type="hidden" name="mode" value="create"/>
          <tr>
            <td colspan="3" align="left">
              Name
              <v:text name="name" xhtml_size="40"/>
            </td>
          </tr>
          <tr>
            <td colspan="3">Description</td>
          </tr>
          <tr>
            <td colspan="3">
              <v:textarea name="desc" xhtml_rows="3" xhtml_cols="40"/>
            </td>
          </tr>
          <tr>
            <td colspan="3">
	      Show Available:
              <v:check-box name="us" value="1" initial-checked="1" xhtml_id="us"/>
              <label for="us">Users</label>
              <v:check-box name="gp" value="1" initial-checked="1" xhtml_id="gr"/>
              <label for="gr">Roles</label>
              <v:button name="load" action="submit" value="Reload"/>
            </td>
          </tr>
          <tr>
            <td colspan="3">
              <table class="complex_selector">
                <tr class="complex_selector_header_row">
                  <th>Available users/groups</th>
                  <th />
                  <th>Selected users/groups</th>
                </tr>
                <tr class="complex_selector_row">
                  <td>
                    <?vsp {
                      declare inx, len, flag  integer;
                      http('<select name="roles_users" class="complex_selector" multiple="TRUE"  style="{width: 260px;} " size="8">');
                      for select U_ID, U_NAME, U_IS_ROLE  from DB.DBA.SYS_USERS  do
                        {
                          inx := 0;
                          flag:=0;
                          len := length (self.roles_grant_list);
                          while (inx < len)
                            {
                              if (flag = 0 and U_NAME = self.roles_grant_list [inx])
                                flag := 1;
                              inx := inx + 1;
                            }
                          if (flag = 0)
                            if ((self.group_sel = 1 and U_IS_ROLE = 1) or (self.user_sel = 1 and U_IS_ROLE = 0))
                              {
                                http (sprintf('<option>')); http (U_NAME); http('</option>');
                              }
                        }
                      http('</select>');
                    } ?>
                  </td>
                  <td align="center">
                    <v:button class="complex_selector" name="grant" action="submit" value=">>"/>
                      <br/>
                    <v:button class="complex_selector" name="revoke" action="submit" value="<<"/>
                  </td>
                  <td>
                    <v:select-list name="sel_list" xhtml_class="complex_selector" xhtml_style="{width: 260px;} " xhtml_size="8"/>
                  </td>
                </tr>
              </table>
            </td>
          </tr>
          <tr>
            <td colspan="3">
              <v:button action="submit" name="cancel" value="Cancel"/>
              <v:button action="submit" name="create" value="Create"/>
            </td>
          </tr>
        </v:form>
      </table>
    </td>
  </tr>

  <?vsp
    }
    else if (get_keyword('mode', control.vc_page.vc_event.ve_params) = 'edit')
    {
  ?>
  <tr>
    <td>
      <table border="0" class="SubAction">
        <v:form name="edit_roles_form" type="simple" method="POST" action="accounts_page.vspx?page=2">
          <input type="hidden" name="role_name" value="<?= get_keyword ('role_name', self.vc_page.vc_event.ve_params) ?>"/>
          <input type="hidden" name="mode" value="edit"/>

          <v:on-post>
            <v:script><![CDATA[ {
              declare mode, val, role_name, g_name  varchar;
              declare  comp vspx_field;
              if (get_keyword('update', control.vc_page.vc_event.ve_params) <> '')
                {
                  declare inx, len, r_ident integer;

                  role_name := get_keyword ('role_name', control.vc_page.vc_event.ve_params);
                  comp := control.vc_find_control ('desc_update');
                  val := comp.ufl_value;
                  update sys_users set U_FULL_NAME = val where U_NAME = role_name;
                  select distinct U_ID into r_ident from SYS_USERS where U_NAME= role_name and U_IS_ROLE =1;


                  if (exists (select GI_SUPER from SYS_ROLE_GRANTS where GI_GRANT = r_ident and GI_DIRECT = 1))
                    {
                      for select GI_SUPER  from SYS_ROLE_GRANTS  where  GI_GRANT = r_ident and GI_DIRECT =1 do
                        {
                          select distinct U_NAME  into g_name from SYS_USERS where U_ID = GI_SUPER;
                          if (g_name <> '')
                            {
                              declare exit handler for sqlstate '*'
                                {
                                  dbg_obj_print (__SQL_MESSAGE);
                                };
                              USER_REVOKE_ROLE (g_name, role_name);
                            }
                        }
                    }

                  inx := 0; len := length (self.roles_grant_list);
                  while (inx < len)
                    {
                      USER_GRANT_ROLE (self.roles_grant_list [inx], role_name);
                      inx := inx + 1;
                    }
                  http_request_status ('HTTP/1.1 302 Found');
                  http_header (sprintf ('Location: accounts_page.vspx?page=2&sid=%s&realm=%s\r\n',self.sid ,self.realm));
                }
              else if (get_keyword ('cancel_update', control.vc_page.vc_event.ve_params) <> '')
                {
                  http_request_status ('HTTP/1.1 302 Found');
                  http_header (sprintf ('Location: accounts_page.vspx?page=2&sid=%s&realm=%s\r\n',self.sid ,self.realm));
                }
              else if (get_keyword ('load_update', control.vc_page.vc_event.ve_params) <> '')
                {
                  comp := control.vc_find_control('gp_update');
                  self.group_sel := comp.ufl_selected;
                  comp := control.vc_find_control('us_update');
                  self.user_sel := comp.ufl_selected;
                }
              else if (get_keyword ('grant_update', control.vc_page.vc_event.ve_params) <> '')
                {
                  declare cnt, i integer;
                  cnt := length (control.vc_page.vc_event.ve_params);
                  i := 0;
                  while (i < cnt)
                    {
                      if (aref (control.vc_page.vc_event.ve_params, i) = 'roles_users_update')
                        {
                          self.roles_grant_list := vector_concat (self.roles_grant_list, vector (aref (control.vc_page.vc_event.ve_params, i + 1)));
                        }
                      i:= i+2;
                    }
                }
              else if (get_keyword('revoke_update', control.vc_page.vc_event.ve_params) <> '')
                {
                  declare cnt, i, size, indx , flag_  integer;
                  declare roles any;
                  roles := vector ();

                  cnt := length (self.roles_grant_list);
                  size:= length (control.vc_page.vc_event.ve_params);
                  i := 0;
                  while (i < cnt)
                    {
                      indx := 0;
                      flag_ := 0;
                      while (indx < size)
                        {
                          if (aref (control.vc_page.vc_event.ve_params,indx) = 'sel_list_update'
                              and self.roles_grant_list[i] = aref(control.vc_page.vc_event.ve_params,indx+1))
                            flag_:=1;
                          indx := indx +2;
                        }
                      if (flag_ = 0)
                        roles := vector_concat (roles, vector (self.roles_grant_list [i]));
                      i:= i + 1;
                    }
                  self.roles_grant_list := vector();
                  cnt := length (roles);
                  i := 0;
                  while (i < cnt)
                    {
                      self.roles_grant_list := vector_concat (self.roles_grant_list, vector (roles [i]));
                      i:= i+1;
                    }
                }
              declare inx, len integer;
              comp := control.vc_find_control ('sel_list_update');
              (comp as vspx_select_list).vsl_items := vector();
              (comp as vspx_select_list).vsl_item_values := vector();
              inx := 0;
              len := length (self.roles_grant_list);
              while (inx < len)
                {
                  (comp as vspx_select_list).vsl_items := vector_concat ((comp as vspx_select_list).vsl_items,
                                                                          vector (self.roles_grant_list [inx]));
                  (comp as vspx_select_list).vsl_item_values := vector_concat ((comp as vspx_select_list).vsl_item_values,
                                                                                vector (self.roles_grant_list [inx]));
                  inx := inx + 1;
                 }
              (comp as vspx_select_list).vsl_selected_inx :=0;
            } ]]></v:script>
          </v:on-post>
          <tr>
            <th colspan="3"><?V get_keyword('role_name', control.vc_page.vc_event.ve_params) ?></th>
          </tr>
          <tr>
            <td colspan="3">Description</td>
          </tr>
          <tr>
            <td colspan="3">
              <v:textarea class="widget_full_width" name="desc_update" xhtml_id="role_edit_desc">
                <v:before-data-bind>
                  <v:script><![CDATA[
                    if ((get_keyword ('update', control.vc_page.vc_event.ve_params) is NULL) and
                        (get_keyword('role_name', control.vc_page.vc_event.ve_params) is not NULL))
                      {
                        declare fn varchar;
                        select U_FULL_NAME into fn from DB.DBA.SYS_USERS where U_NAME = get_keyword('role_name', control.vc_page.vc_event.ve_params);
                        if (fn is null)
                          fn := '';
                        control.ufl_value := fn;
                        control.vc_data_bound := 1;
                      }
                  ]]></v:script>
                </v:before-data-bind>
              </v:textarea>
            </td>
          </tr>
          <tr>
            <td colspan="3">
              Show:
              <v:check-box name="us_update" value="1" initial-checked="1" xhtml_id="us_update"/>
              <label for="us_update">Users</label>
              <v:check-box name="gp_update" value="1" initial-checked="1" xhtml_id="gp_update"/>
              <label for="gp_update">Roles</label>
              <v:button name="load_update" action="submit" value="Reload"/>
            </td>
          </tr>
          <tr>
            <td>
              <table class="complex_selector">
                <tr class="complex_selector_header">
                  <th>Available users/groups</th>
                  <th/>
                  <th>Selected users/groups</th>
                </tr>
                <tr>
                  <td> <!-- select box for available-->
                    <?vsp
                      declare inx, len, flag  integer;
                      http ('<select class="complex_selector" name="roles_users_update" size="10" multiple="TRUE">');
                      for select U_ID, U_NAME, U_IS_ROLE  from DB.DBA.SYS_USERS  do
                        {
                          inx := 0;
                          flag := 0;
                          len := length (self.roles_grant_list);
                          while (inx < len)
                            {
                              if (flag = 0 and U_NAME = self.roles_grant_list [inx])
                              flag := 1;
                              inx := inx + 1;
                            }
                          if (flag = 0 and U_NAME <> get_keyword ('role_name', self.vc_page.vc_event.ve_params))
                            if ((self.group_sel = 1 and U_IS_ROLE = 1) or
                                (self.user_sel = 1 and U_IS_ROLE = 0))
                              {
                                http(sprintf('<option>')); http(U_NAME); http('</option>');
                              }
                        }
                      http('</select>');
                    ?>
                  </td>
                  <td> <!-- move buttons -->
                    <v:button class="complex_selector" name="grant_update" action="submit" value=">>"/>
                    <br/>
                    <v:button class="complex_selector" name="revoke_update" action="submit" value="<<"/>
                  </td>
                  <td> <!-- select box for chosen -->
                    <v:select-list xhtml_class="complex_selector" name="sel_list_update" xhtml_size="10" xhtml_multiple="TRUE" >
                      <v:before-data-bind>
                        <v:script><![CDATA[
                          declare  comp vspx_field;

                          if (self.roles_read_flag = 0 and
                              ((get_keyword('update', control.vc_page.vc_event.ve_params) is NULL) and
                              (get_keyword('role_name', control.vc_page.vc_event.ve_params) is not NULL)))
                            {
                              declare u_ident  integer;
                              declare  g_name varchar;
                              g_name := get_keyword('role_name', control.vc_page.vc_event.ve_params);
                              self.roles_grant_list := vector();
                              select distinct U_ID into u_ident from SYS_USERS where U_NAME= g_name  and U_IS_ROLE =1;
                              if (exists (select GI_SUPER from SYS_ROLE_GRANTS where GI_GRANT = u_ident and GI_DIRECT =1))
                                {
                                   for select GI_SUPER  from SYS_ROLE_GRANTS  where  GI_GRANT = u_ident and GI_DIRECT ='1' do
                                     {
                                       if (exists (select distinct U_NAME from SYS_USERS where U_ID = GI_SUPER ))
                                         {
                                           select distinct U_NAME  into g_name from SYS_USERS where U_ID = GI_SUPER;
                                           if (g_name is not NULL and g_name <> '')
                                             self.roles_grant_list := vector_concat (self.roles_grant_list, vector(g_name));
                                         }
                                     }
                                }
                              declare inx, len integer;
                              comp := control.vc_parent.vc_find_control('sel_list_update');
                              (comp as vspx_select_list).vsl_items := vector();
                              (comp as vspx_select_list).vsl_item_values:= vector();
                              inx := 0; len := length (self.roles_grant_list);
                              while (inx < len)
                                {
                                  (comp as vspx_select_list).vsl_items := vector_concat ((comp as vspx_select_list).vsl_items,
                                                                                          vector(self.roles_grant_list[inx]));
                                  (comp as vspx_select_list).vsl_item_values := vector_concat ((comp as vspx_select_list).vsl_item_values,
                                                                                                vector(self.roles_grant_list[inx]));
                                  inx := inx + 1;
                                }
                              (comp as vspx_select_list).vsl_selected_inx :=0;
                            }
                          self.roles_read_flag :=1;
                          control.vc_data_bound := 1;
                        ]]></v:script>
                      </v:before-data-bind>
                    </v:select-list>
                  </td> <!-- end select box for chosen -->
                </tr>
              </table>
            </td>
          </tr>
          <tr>
            <td colspan="3">
              <v:button action="submit" name="cancel_update" value="Cancel"/>
              <v:button action="submit" name="update" value="Update"/>
            </td>
          </tr>
        </v:form>
      </table>
    </td>
  </tr>
  <?vsp
    }
    else
    {  ?>
    <tr>
      <td>
	<v:variable name="ordr" type="varchar" default="''" />
	<v:variable name="ordseqr" type="varchar" default="'asc'" />
	  <v:method name="set_ordr" arglist="in x any, inout e vspx_event, inout ds vspx_control"><![CDATA[
		if (self.ordr = x)
		  {
		    if (self.ordseqr = 'asc')
		      self.ordseqr := 'desc';
		    else
		      self.ordseqr := 'asc';
		  }
		else
		  {
		    self.ordr := x;
		    self.ordseqr := 'asc';
		  }
		--if (ds is not null)
		--  ds.vc_data_bind (e);
	      ]]></v:method>
	<v:form name="f_role_list" type="simple" method="POST" action="accounts_page.vspx?page=2">
	<div class="scroll_area">
	  <table class="listing">
	    <tr class="listing_header_row"><th>
			      <v:button action="simple" name="name_ord5" value="Account Name" style="url">
				  <v:on-post><![CDATA[
				      self.set_ordr ('1', e, self);
				      ]]></v:on-post>
			      </v:button>
		</th><th>
			      <v:button action="simple" name="name_ord6" value="Description" style="url">
				  <v:on-post><![CDATA[
				      self.set_ordr ('2', e, self);
				      ]]></v:on-post>
			      </v:button>
		</th><th colspan="2">
		<v:url name="new_role_u" url="accounts_page.vspx?page=2&mode=create" value="Create New Role" />
	    </th></tr>
    <?vsp
       declare r_c integer;
       declare sql, h, dta any;
       r_c := 0;

       sql := 'select U_NAME, U_FULL_NAME from DB.DBA.SYS_USERS where U_IS_ROLE = 1';
       if (self.ordr <> '')
         sql := sql || ' order by ' || self.ordr || ' ' || self.ordseqr;

       exec (sql, null, null, vector (), 0, null, null, h);

       while (0 = exec_next (h, null, null, dta))
        {
	  declare fn, U_NAME, U_FULL_NAME varchar;
	  U_NAME := dta[0];
	  U_FULL_NAME := dta[1];
          r_c := r_c + 1;
          fn:='';
          if ( U_FULL_NAME is null)
            fn:='';
          else
            fn:= U_FULL_NAME;
          http(sprintf ('<tr id="%s" class="%s">', coalesce (U_NAME, ''), case when mod (r_c, 2) then 'listing_row_odd' else 'listing_row_even' end));
          http('<td class="listing_col"><img src="images/icons/group_16.png" alt="Role" title="Role"/> ');
          http(U_NAME);  http('</td>');
          http('<td class="listing_col">');  http(fn);    http('</td>');
          http('<td class="listing_col_action" colspan="2">');
          if( not (get_keyword('mode', control.vc_page.vc_event.ve_params) = 'edit' and get_keyword('role_name', control.vc_page.vc_event.ve_params) =U_NAME ) or get_keyword('mode', control.vc_page.vc_event.ve_params) is NULL or  get_keyword('role_name', control.vc_page.vc_event.ve_params) is NULL )
	  http(sprintf('<a href="accounts_page.vspx?page=2&sid=%s&realm=%s&mode=edit&role_name=%s#%s"><img src="images/icons/edit_16.png" border="0" alt="Edit" title="Edit"/>&nbsp;Edit</a>&nbsp;',self.sid ,self.realm,U_NAME,U_NAME));
          if( not (get_keyword('mode', control.vc_page.vc_event.ve_params) = 'edit' and get_keyword('role_name', control.vc_page.vc_event.ve_params) =U_NAME ) or get_keyword('mode', control.vc_page.vc_event.ve_params) is NULL or  get_keyword('role_name', control.vc_page.vc_event.ve_params) is NULL )
	  http(sprintf('<a href="role_remove.vspx?sid=%s&realm=%s&mode=delete&role_name=%s"><img src="images/icons/trash_16.png" border="0" alt="Delete" title="Delete"/>&nbsp;Delete</a>',self.sid ,self.realm,U_NAME));
          http('</td>');
            http('</tr>');
	  }
	  exec_close (h);
	  ?>
	</table>
      </div>
    </v:form>
    </td>
  </tr>
  <?vsp
    }
  ?>

</table>
